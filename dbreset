#!/bin/bash

set_defaults(){
db='gbe_dev'
user='django_user'
secret='secret'
filepath='/vagrant/config'
setfilepath=false
migration=false
migrations=''
local_path=false
fileprefix='DB_backup_gbelive_'
staticlocation='false'
collectstatic=false
syncdb=false

dbfile=`ls -1t $filepath/$fileprefix*.sql 2> /dev/null| head -n 1 | \
        xargs basename 2> /dev/null`
if [ -r $dbfile ]
then
    restore=true
else
    restore=false
fi

}
set_defaults
    
print_help(){
echo "
Usage: dbreset [-] [-h] [-d database name] [-s secret] [-u username] 
        [-l [path to local_settings.py]] [-f SQL file] [-p path to SQL file]
        [-m [migrations]]

    -   -  run dbreset entirely with defaults
    -h  -  help on dbreset (this file)
    -d  -  name of database to drop and restore, default: gbe-dev
    -s  -  secret password used to identify database user, default: secret
    -u  -  username of database user, default: django_user
    -l  -  load database name, user name, and secret from local_settings.py
               default behavior is to not load settings, and settings set on
               the command line over-ride these setting
    -f  -  name of file containing SQL statements and data to be restored
               can accept filename, fully qualified path, or relative path,
               default is most recent of database backup with filename format
               DB_backup_gbelive_*.sql
    -p  -  path to SQL file, may be fully qualified or relative, with throw
               an error is path is both specified with -p and -f,
               default: /vagrant/expo
    -r  -  DO NOT restore database from file, default is to restore from file
               if a database file is present
    -m  -  run migrations (and an optional space separate list of migrations
               to run, currently accepts 'gbe scheduler ticketing', precede
               with 'fake' to run them as --fake), does not run as default,
               currently deletes ghost migrations, then migrates all.
    -b  -  syncronize db after restoring and running migrations
"
}

short_help(){
echo "
Usage: dbreset [-] [-h] [-d database name] [-s secret] [-u username] 
        [-l [path to local_settings.py]] [-f SQL file] [-p path to SQL file]
        [-m [migrations]]
Try 'dbreset -h' to get basic help on how to use dbreset.
"
}

reset_db(){
    #  $1 is name of database
    #  $2 is name of user
    #  $3 is secret password

    #  Keep DROP DATABASE test-foo in place, as test- is used by py.test.
    mysql -u root -proot -e "DROP DATABASE IF EXISTS TEST_$1"
    mysql -u root -proot -e "DROP DATABASE IF EXISTS test_$1"
    mysql -u root -proot -e "DROP DATABASE IF EXISTS $1"
    mysql -u root -proot -e "CREATE DATABASE $1"
    mysql -u root -proot -e "USE $1"
    eval mysql -u root -proot -e \"GRANT ALL ON $1.\* to \'$2\'@\'%\' IDENTIFIED BY \'$3\' WITH GRANT OPTION\"
    eval mysql -u root -proot -e \"GRANT ALL ON $1.\* to \'$2\'@\'%\' IDENTIFIED BY \'$3\'\"
    eval mysql -u root -proot -e \"GRANT ALL ON test_$1.\* to \'$2\'@\'%\' IDENTIFIED BY \'$3\' WITH GRANT OPTION\"
    eval mysql -u root -proot -e \"GRANT ALL ON test_$1.\* to \'$2\'@\'%\' IDENTIFIED BY \'$3\'\"
    mysql -u root -proot -e "flush privileges"
}

restore_db(){
    cat $1 | /vagrant/expo/manage.py dbshell
}

default_migrations(){
    pushd `pwd`
    cd /vagrant/expo
    /vagrant/expo/manage.py migrate --delete-ghost-migrations --noinput
    /vagrant/expo/manage.py migrate --all --noinput
    popd
}

migrations(){
    #  Doing it this way for now, undecided how I want to deal with options
    #  after name of migration (see first line in default migrations).
    while [ $# != '0' ]
    do
        if [ $1 == 'fake' ]
	then
	    migration="--fake $2"
	    shift
        else
	    migration=$1
	fi
	shift
        /vagrant/expo/manage.py migrate --noinput $migration
    done
}

sync_db(){
    pushd `pwd`
    cd /vagrant/expo
    /vagrant/expo/manage.py syncdb --all --noinput
    popd
    }

#  This block does not work, because manage.py gets the location wrong
#collect_static(){
#    pushd `pwd`
#    cd /vagrant/expo
#    /vagrant/expo/manage.py collectstatic --noinput --settings=expo.expo.local_settings
#    popd
#    }

load_settings(){
    db_settings=('' '' '')
    staticlocation=''
    lcl=$1/local_settings.py
    if [ -f $lcl ]
        then
            db_settings=(`awk '/DATABASES =/,/}/ {pass}; /default/,/}/ {print}' $lcl | egrep -e 'NAME|USER|PASSWORD' | awk '{ print $2 }' | sed -e s#,##g -e s#\'##g`)
            staticlocation=`grep 'STATIC_ROOT' $lcl | awk '{ print $3 }' | sed -e s#,##g -e s#\'##g`
    fi

    lcl=$1/settings.py
    if [ -f $lcl ]
    then
        if [ ${db_settings[0]} = '' ]
        then
	    ${db_settings[0]}=`awk '/DATABASES =/,/}/ {pass}; /default/,/}/ {print}' $lcl | grep 'NAME' | awk '{ print $2 }' | sed -e s#,##g -e s#\'##g`
	fi
	if [ ${db_settings[1]} = '' ]
	then
	    ${db_settings[1]}=`awk '/DATABASES =/,/}/ {pass}; /default/,/}/ {print}' $lcl | grep 'USER' | awk '{ print $2 }' | sed -e s#,##g -e s#\'##g`
	fi
	if [ ${db_settings[2]} = '' ]
	then
	    ${db_settings[2]}=`awk '/DATABASES =/,/}/ {pass}; /default/,/}/ {print}' $lcl | grep 'PASSWORD' | awk '{ print $2 }' | sed -e s#,##g -e s#\'##g`
        fi
	if [ $staticlocation = '' ]
	then
            staticlocation=`grep 'STATIC_ROOT' $lcl | awk '{ print $3 }' | sed -e s#,##g -e s#\'##g`
	fi
    fi

    echo ${db_settings[0]} ${db_settings[1]} ${db_settings[2]} $staticlocation
}

if [ $# == '0' ]
then
    short_help
    exit
fi
while [ $# != '0' ]
do
    if [ $1 == '-' ]
    then
	#  This option exists so that it is easy reset the db to defaults, but
	#  not in a way that is likely to destroy current work from just trying
	#  to see what this script does
        set_defaults
	shift $#
    elif [ $1 == '-h' ]
    then
        print_help
        exit
    elif [ $1 == '-d' ]
    then
        db=$2
        shift
    elif [ $1 == '-u' ]
    then
	if $setfilepath
	then
	    echo 'Filepath already set by explict path in filename.'
	    exit 8
	else
	    setfilepath=true
            user=$2
            shift
	fi
    elif [ $1 == '-s' ]
    then
        secret=$2
        shift
    elif [ $1 == '-p' ]
    then
        filepath=`realpath $2`
        shift
    elif [ $1 == '-l' ]
    then
	if [ `echo $2 | sed s#'^$'#'-'# | grep -c '^-'` == '0' ]
	then
	    local_path='/vagrant/expo/expo/local_settings.py'
	else
            if [ -d $2 ]
	    then
		local_path="`realpath $2`/local_settings.py"
            elif [ -f $2 ]
	    then
		local_path=`realpath $2`
	    else
		echo 'Improper path to local_settings.py, check location and retry'
		exit 3
	    fi
	    shift
	fi
    elif [ $1 == '-r' ]
    then
	restore=false
    elif [ $1 == '-f' ]
    then
        if [ `echo $2 | grep -c '/'` == '0' ]
	then
            dbfile=$2
	    restore=true
            shift
	elif $setfilepath
	then
	    echo 'File path set explicitly by -u flag, exiting.'
	    exit 7
        else
	    restore=true
	    setfilepath=true
            dbfile=`basename $2`
	    filepath=`dirname $2| xargs realpath`
            shift
        fi
    elif [ $1 == '-m' ]
    then
        migration=true
	while [ `echo ${2:0:1} | grep -c '^-'` != '0' ]
	do
    	    migrations="$migrations $2"
	    shift
        done
	shift
    elif [ $1 == '-c' ]
    then
	collectstatic=true
    elif [ $1 == '-b' ]
    then
	syncdb=true
    else
        echo 'Syntax error: Check options for correctness and retry.'
        exit 1
    fi
    shift
done

if ! $local_path
then
    local_path='/vagrant/expo/expo'
fi

settings=(`load_settings $local_path`)
#  Want to find a less brain dead way of overriding non-default settings
if [ "${settings[0]}" != '' ]
then
    db=${settings[0]}
fi
if [ "${settings[1]}" != '' ]
then
    user=${settings[1]}
fi
if [ "${settings[2]}" != '' ]
then
    secret=${settings[2]}
fi

if [ "${settings[3]}" != '' ]
then
    staticlocation=${settings[3]}
fi
unset settings

reset_db $db $user $secret

if $restore
then
    echo "Restoring DB: User: $user, DB: $db"
    echo "        DB file: $filepath/$dbfile"
    restore_db $filepath/$dbfile
fi

if $migration
then
    if [ `echo $migrations | wc -w` != '0' ]
    then
        migrations $migrations
    else
	default_migrations
    fi
fi

if $syncdb
then
    sync_db
fi

if [ $staticlocation != 'false' ]
    then
    if [ ! -d $staticlocation ]
    then
        mkdir $staticlocation
    fi
fi

#if $collectstatic
#then
#    collect_static 
#fi
