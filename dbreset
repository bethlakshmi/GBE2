#!/bin/bash

set_defaults(){
db='gbe_dev'
user='django_user'
secret='secret'
dbfile='gbe_1025.mysql'
filepath='/vagrant/config'
restore=True
migration=False
migrations=''
local_path=False
}
set_defaults

print_help(){
echo "
Usage: dbreset [-] [-h] [-d database name] [-s secret] [-u username] 
        [-l [path to local_settings.py]] [-f SQL file] [-p path to SQL file]
        [-m [migrations]]

    -   -  run dbreset entirely with defaults
    -h  -  help on dbreset (this file)
    -d  -  name of database to drop and restore, default: gbe-dev
    -s  -  secret password used to identify database user, default: secret
    -u  -  username of database user, default: django_user
    -l  -  load database name, user name, and secret from local_settings.py
               default behavior is to not load settings, and settings set on
               the command line over-ride these setting
    -f  -  name of file containing SQL statements and data to be restored
               can accept filename, fully qualified path, or relative path,
               default: gbe_1025.mysql
    -p  -  path to SQL file, may be fully qualified or relative, with throw
               an error is path is both specified with -p and -f,
               default: /vagrant/expo
    -r  -  DO NOT restore database from file, default is to restore from file
    -m  -  run migrations (and an optional space separate list of migrations
               to run, currently accepts 'gbe scheduler ticketing', precede
               with 'fake' to run them as --fake, does not run as default,
               default migrations are currently:
	           --fake gbe 0001
		   scheduler
		   ticketing
		   gbe
            WARNING:  Due to a limitation in Django and manage.py, migrations
                currently only work on the database with the user and secret
                listed in the local_settings.py file.

"
}

short_help(){
echo "
Usage: dbreset [-] [-h] [-d database name] [-s secret] [-u username] 
        [-l [path to local_settings.py]] [-f SQL file] [-p path to SQL file]
        [-m [migrations]]
Try 'dbreset -h' to get basic help on how to use dbreset.
"
}

reset_db(){
    #  $1 is name of database
    #  $2 is name of user
    #  $3 is secret password

    mysql -u root -proot -e "DROP DATABASE IF EXISTS $1"
    mysql -u root -proot -e "CREATE DATABASE $1"
    eval mysql -u root -proot -e \"GRANT ALL ON $1.\* to \'$2\'@\'%\' IDENTIFIED BY \'$3\' WITH GRANT OPTION\"
    eval mysql -u root -proot -e \"GRANT ALL ON $1.\* to \'$2\'@\'%\' IDENTIFIED BY \'$3\'\"
    mysql -u root -proot -e "flush privileges"
}

restore_db(){
    cat $1 | mysql -u root -proot $2
}

default_migrations(){
    python /vagrant/expo/manage.py migrate --fake gbe 0001
    python /vagrant/expo/manage.py migrate scheduler
    python /vagrant/expo/manage.py migrate ticketing
    python /vagrant/expo/manage.py migrate gbe
}

migrations(){
    #  Doing it this way for now, undecided how I want to deal with options
    #  after name of migration (see first line in default migrations).
    while [ $# != '0' ]
    do
        if [ $1 == 'fake' ]
	then
	    migration="--fake $2"
	    shift
        else
	    migration=$1
	fi
	shift
        python /vagrant/expo/manage.py migrate $migration
    done
}

load_settings(){
    db_settings=(`awk '/DATABASES =/,/}/ {pass}; /default/,/}/ {print}' $1 | egrep -e 'NAME|USER|PASSWORD' | awk '{ print $2 }' | sed -e s#,##g -e s#\'##g`)
    echo $db_settings
}

if [ $# == '0' ]
then
    short_help
    exit
fi
while [ $# != '0' ]
do
    if [ $1 == '-' ]
    then
	#  This option exists so that it is easy reset the db to defaults, but
	#  not in a way that is likely to destroy current work from just trying
	#  to see what this script does
        set_defaults
	shift $#
    elif [ $1 == '-h' ]
    then
        print_help
        exit
    elif [ $1 == '-d' ]
    then
        db=$2
        shift
    elif [ $1 == '-u' ]
    then
        user=$2
	shift
    elif [ $1 == '-s' ]
    then
        secret=$2
        shift
    elif [ $1 == '-p' ]
    then
        filepath=`realpath $2`
        shift
    elif [ $1 == '-l' ]
    then
	if [ `echo $2 | sed s#'^$'#'-'# | grep -c '^-'` == '1' ]
	then
	    local_path='/vagrant/expo/expo/local_settings.py'
	else
            if [ -d $2 ]
	    then
		local_path="`realpath $2`/local_settings.py"
            elif [ -f $2 ]
	    then
		local_path=`realpath $2`
	    else
		echo 'Improper path to local_settings.py, check location and retry'
		exit 3
	    fi
	    shift
	fi
    elif [ $1 == '-r' ]
    then
	restore=False
    elif [ $1 == '-f' ]
    then
        if [ `grep -c '/' $2` == '0' ]
	then
            dbfile=$2
            shift
	elif [ $filepath != '/vagrant/expo' ]
	then
	    echo "Setting the path twice is ambiguous.  Exiting.  Please pick one."
	    exit 7
        else
            dbfile=`echo $2 | basename`
	    filepath=`echo $2 | xargs dirname | xargs realpath`
        fi
    elif [ $1 == '-m' ]
    then
        migration=True
	while [ `echo $2 | sed s#'^$'#'-'# | grep -c '^-'` == '0' ]
	do
    	    migrations="$migrations $2"
	    shift
        done
	shift
    else
        echo 'Syntax error: Check options for correctness and retry.'
        exit 1
    fi
    shift
done

if [ $local_path != 'False' ]
then
    settings=`load_settings $local_path`    
    #  Want to find a less brain dead way of overriding non-default settings
    if [ $db == 'gbe_dev' ]
    then
        db=${settings[0]}
    fi
    if [ $user == 'django_user' ]
    then
	user=${settings[1]}
    fi
    if [ $secret == 'secret' ]
    then
        secret=${settings[2]}
    fi
    unset settings
fi

reset_db $db $user $secret

if [ $restore == 'True' ]
then
    restore_db $filepath/$dbfile $db
fi

if [ $migration == 'True' ]
then
    if [ `echo $migrations | wc -w` != '0' ]
    then
        migrations $migrations
    else
	default_migrations
    fi
fi
